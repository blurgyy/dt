import{_ as n,c as s,o as a,a as e}from"./app.65bba18d.js";const h='{"title":"Templating","description":"","frontmatter":{},"headers":[{"level":2,"title":"Setting Values","slug":"setting-values"},{"level":2,"title":"Writing templates","slug":"writing-templates"}],"relativePath":"config/guide/07-templating.md","lastUpdated":1643114966991}',t={},o=e(`<h1 id="templating" tabindex="-1">Templating <a class="header-anchor" href="#templating" aria-hidden="true">#</a></h1><p><code>dt-cli</code> allows its source files to be templates, the templates are rendered with values defined in <code>dt-cli</code>&#39;s config file. Here is a simple example that parameterizes several GUI-related properties, and render a template to its destination with <code>dt-cli</code>.</p><div class="info custom-block"><p class="custom-block-title">NOTE</p><p>Only templating a single file shows little benefit. This is just a toy example that demonstrates the basic usage of templating. In real-world uses, the <code>sources</code> array can include more template files, so that templating can actually ease config file management.</p></div><h2 id="setting-values" tabindex="-1">Setting Values <a class="header-anchor" href="#setting-values" aria-hidden="true">#</a></h2><p>In <code>dt-cli</code>&#39;s config file, add another section with name <code>[context]</code>. Here is where the values are set. We will define the following values:</p><div class="language-toml"><div class="highlight-lines"><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><div class="highlighted">\xA0</div><br><br><br><br><br><br></div><pre><code><span class="token comment"># Contents of ~/.config/dt/cli.toml</span>
<span class="token punctuation">[</span><span class="token table class-name">global</span><span class="token punctuation">]</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">[</span><span class="token table class-name">context</span><span class="token punctuation">]</span>
<span class="token key property">gui.font-size</span> <span class="token punctuation">=</span> <span class="token number">15</span>
<span class="token key property">gui.cursor-size</span> <span class="token punctuation">=</span> <span class="token number">24</span>

<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">local</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;gui&quot;</span>
<span class="token key property">basedir</span> <span class="token punctuation">=</span> <span class="token string">&quot;~/dt/gui&quot;</span>
<span class="token key property">sources</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>
  <span class="token string">&quot;gtk-3.0/settings.ini&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token key property">target</span> <span class="token punctuation">=</span> <span class="token string">&quot;~/.config&quot;</span>
</code></pre></div><p>In this config example, we have two values under the <code>context.gui</code> section.</p><div class="warning custom-block"><p class="custom-block-title">INFO</p><p>These two values will <strong>only</strong> be rendered for templates in a group named <code>gui</code>.</p></div><h2 id="writing-templates" tabindex="-1">Writing templates <a class="header-anchor" href="#writing-templates" aria-hidden="true">#</a></h2><p>Templates are understood by <code>dt-cli</code> with the <a href="https://handlebarsjs.com/guide/" target="_blank" rel="noopener noreferrer">Handlebars</a> syntax. We can template the gtk settings file in the <code>gui</code> group (se above) as:</p><div class="language-ini"><pre><code><span class="token comment"># Contents of ~/dt/gui/gtk-3.0/settings.ini</span>
<span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Settings</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">gtk-cursor-theme-size</span><span class="token punctuation">=</span><span class="token value attr-value">{{{ gui.cursor-size }}}</span>
<span class="token key attr-name">gtk-font-name</span><span class="token punctuation">=</span><span class="token value attr-value">system-ui {{{ gui.font-size }}}</span>
</code></pre></div><p>After this, running <code>dt-cli</code> and <code>~/.config/gtk-3.0/settings.ini</code> will have our templated values:</p><div class="language-ini"><pre><code><span class="token comment"># Contents of ~/.config/gtk-3.0/settings.ini</span>
<span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Settings</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">gtk-cursor-theme-size</span><span class="token punctuation">=</span><span class="token value attr-value">24</span>
<span class="token key attr-name">gtk-font-name</span><span class="token punctuation">=</span><span class="token value attr-value">system-ui 15</span>
</code></pre></div>`,13),p=[o];function i(c,l,r,u,d,g){return a(),s("div",null,p)}var m=n(t,[["render",i]]);export{h as __pageData,m as default};
