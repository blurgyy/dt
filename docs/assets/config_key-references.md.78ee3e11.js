import{_ as e,c as o,o as t,a}from"./app.8da8cbf3.js";const k='{"title":"Key References","description":"","frontmatter":{"title":"Key References"},"headers":[{"level":2,"title":"Global","slug":"global"},{"level":3,"title":"staging","slug":"staging"},{"level":3,"title":"method","slug":"method"},{"level":3,"title":"allow_overwrite","slug":"allow-overwrite"},{"level":3,"title":"hostname_sep","slug":"hostname-sep"},{"level":2,"title":"Local Groups","slug":"local-groups"},{"level":3,"title":"name","slug":"name"},{"level":3,"title":"basedir","slug":"basedir"},{"level":3,"title":"sources","slug":"sources"},{"level":3,"title":"target","slug":"target"},{"level":3,"title":"ignored","slug":"ignored"},{"level":3,"title":"hostname_sep","slug":"hostname-sep-1"},{"level":3,"title":"allow_overwrite","slug":"allow-overwrite-1"},{"level":3,"title":"method","slug":"method-1"}],"relativePath":"config/key-references.md","lastUpdated":1634127161537}',s={},n=a(`<h1 id="key-references" tabindex="-1">Key References <a class="header-anchor" href="#key-references" aria-hidden="true">#</a></h1><p>This chapter lists available configuration keys.</p><h2 id="global" tabindex="-1">Global <a class="header-anchor" href="#global" aria-hidden="true">#</a></h2><blockquote><p>[optional]</p></blockquote><p>A global object is defined in the <code>[global]</code> section.</p><h3 id="staging" tabindex="-1"><code>staging</code> <a class="header-anchor" href="#staging" aria-hidden="true">#</a></h3><blockquote><p>[optional] string</p></blockquote><p>Defines the staging root directory, does not matter when <a href="#method">syncing method</a> is set to <code>Copy</code>. If omitted, uses <code>$XDG_CACHE_HOME/dt/staging</code> if environment variable <code>XDG_CACHE_HOME</code> is set, otherwise uses <code>$HOME/.cache/dt/staging</code>.</p><h3 id="method" tabindex="-1"><code>method</code> <a class="header-anchor" href="#method" aria-hidden="true">#</a></h3><blockquote><p>[optional] <code>Copy</code>|<code>Symlink</code></p></blockquote><p>The syncing method. Available values are:</p><ul><li><code>Copy</code></li><li><code>Symlink</code></li></ul><p>If omitted, uses <code>Symlink</code>. When <code>method</code> is set to <code>Copy</code>, the <a href="#staging"><code>staging</code></a> setting will be disabled. For more details, see <a href="/config/guide/syncing-methods.html">Syncing Methods</a>.</p><h3 id="allow-overwrite" tabindex="-1"><code>allow_overwrite</code> <a class="header-anchor" href="#allow-overwrite" aria-hidden="true">#</a></h3><blockquote><p>[optional] bool</p></blockquote><p>Whether to allow overwriting existing files. If omitted, uses <code>false</code>.</p><p>This alters syncing behaviours when the target file exists. If set to <code>true</code>, no errors/warnings will be omitted when the target file exists; otherwise reports error and skips the existing item. Using dry run to spot the existing files before syncing is recommended.</p><h3 id="hostname-sep" tabindex="-1"><code>hostname_sep</code> <a class="header-anchor" href="#hostname-sep" aria-hidden="true">#</a></h3><blockquote><p>[optional] string</p></blockquote><p>Defines the default value when a <a href="#hostname-sep-1">group&#39;s <code>hostname_sep</code></a> is not set. If omitted, uses <code>@@</code>.</p><h2 id="local-groups" tabindex="-1">Local Groups <a class="header-anchor" href="#local-groups" aria-hidden="true">#</a></h2><blockquote><p>[required] array of <a href="https://docs.rs/dt-core/latest/dt_core/config/struct.LocalSyncConfig.html" target="_blank" rel="noopener noreferrer"><code>LocalSyncConfig</code></a>s</p></blockquote><p>Local groups are defined in <code>[[local]]</code> arrays.</p><h3 id="name" tabindex="-1"><code>name</code> <a class="header-anchor" href="#name" aria-hidden="true">#</a></h3><blockquote><p>[required] string</p></blockquote><p>A <em>unique</em> name given to this group, used for inferring current group&#39;s staging directory. For example, if <code>global.staging</code> is set to <code>/some/dir</code>, a local group with <code>name</code> set to <code>Dotfiles</code> will have a staging directory as <code>/some/dir/Dotfiles</code>. Cannot contain slash (<code>/</code>).</p><h3 id="basedir" tabindex="-1"><code>basedir</code> <a class="header-anchor" href="#basedir" aria-hidden="true">#</a></h3><blockquote><p>[required] string</p></blockquote><p>The base directory of all source items. This simplifies configuration files with common prefixes in <code>local.sources</code> array.</p><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h4><p>For a directory structure like:</p><div class="language-plain"><pre><code>dt/
\u251C\u2500\u2500 dt-core/
\u2502  \u2514\u2500\u2500 src/
\u2502     \u2514\u2500\u2500 config.rs
\u251C\u2500\u2500 dt-cli/
\u2502  \u2514\u2500\u2500 src/
\u2502     \u2514\u2500\u2500 main.rs
\u2514\u2500\u2500 README.md
</code></pre></div><p>Consider the following config file:</p><div class="language-toml"><pre><code><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">local</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token key property">basedir</span> <span class="token punctuation">=</span> <span class="token string">&quot;dt/dt-cli&quot;</span>
<span class="token key property">sources</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">]</span>
<span class="token key property">target</span> <span class="token punctuation">=</span> <span class="token string">&quot;.&quot;</span>
</code></pre></div><p>It will only sync <code>src/main.rs</code> to the configured target directory (in this case, the target directory is where <code>dt</code> is being executed).</p><h3 id="sources" tabindex="-1"><code>sources</code> <a class="header-anchor" href="#sources" aria-hidden="true">#</a></h3><blockquote><p>[required] array of strings</p></blockquote><p>Paths (relative to <code>basedir</code>) to the items to be synced. Allow globbing patterns</p><h3 id="target" tabindex="-1"><code>target</code> <a class="header-anchor" href="#target" aria-hidden="true">#</a></h3><blockquote><p>[required] string</p></blockquote><p>The path of the parent dir of the final synced items.</p><h4 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-hidden="true">#</a></h4><div class="language-toml"><pre><code><span class="token key property">source</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;/source/file&quot;</span><span class="token punctuation">]</span>
<span class="token key property">target</span> <span class="token punctuation">=</span> <span class="token string">&quot;/tar/get&quot;</span>
</code></pre></div><p>will sync &quot;/source/file&quot; to &quot;/tar/get/file&quot; (creating non-existing directories along the way), while</p><div class="language-toml"><pre><code><span class="token key property">source</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;/source/dir&quot;</span><span class="token punctuation">]</span>
<span class="token key property">target</span> <span class="token punctuation">=</span> <span class="token string">&quot;/tar/get/dir&quot;</span>
</code></pre></div><p>will sync &quot;source/dir&quot; to &quot;/tar/get/dir/dir&quot; (creating non-existing directories along the way). If <a href="#method-1"><code>method</code></a> is set to <code>Symlink</code>, non-existing directories in the staging directory are also created along the way.</p><h3 id="ignored" tabindex="-1"><code>ignored</code> <a class="header-anchor" href="#ignored" aria-hidden="true">#</a></h3><blockquote><p>[todo]</p></blockquote><div class="danger custom-block"><p class="custom-block-title">Panics</p><p>Adding this to config file causes current version of <code>dt-cli</code> to panic.</p></div><h3 id="hostname-sep-1" tabindex="-1"><code>hostname_sep</code> <a class="header-anchor" href="#hostname-sep-1" aria-hidden="true">#</a></h3><blockquote><p>[optional] string</p></blockquote><p>Separator for per-host settings, overries the <a href="#hostname-sep">global <code>hostname_sep</code></a> key.</p><p>An additional item with <code>\${hostname_sep}$(hostname)</code> appended to the original item name will be checked first, before looking for the original item. If the appended item is found, use this item instead of the configured one.</p><p>Also ignores items that are meant for other hosts by checking if the string after <code>hostname_sep</code> matches current machine&#39;s hostname.</p><h4 id="example-2" tabindex="-1">Example <a class="header-anchor" href="#example-2" aria-hidden="true">#</a></h4><p>When the following directory structure exists:</p><div class="language-plain"><pre><code>~/.ssh/
\u251C\u2500\u2500 authorized_keys
\u251C\u2500\u2500 authorized_keys@@sherlock
\u251C\u2500\u2500 authorized_keys@@watson
\u251C\u2500\u2500 config
\u251C\u2500\u2500 config@sherlock
\u2514\u2500\u2500 config@watson
</code></pre></div><p>On a machine with hostname set to <code>watson</code>, the below configuration (extraneous keys are omitted here)</p><div class="language-toml [[local]]"><pre><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token key property">hostname_sep</span> <span class="token punctuation">=</span> <span class="token string">&quot;@@&quot;</span>

<span class="token key property">basedir</span> <span class="token punctuation">=</span> <span class="token string">&quot;~/.ssh&quot;</span>
<span class="token key property">sources</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">]</span>
<span class="token key property">target</span> <span class="token punctuation">=</span> <span class="token string">&quot;/tmp/sshconfig&quot;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre></div><p>will result in the below target (<code>/tmp/sshconfig</code>):</p><div class="language-plain"><pre><code>/tmp/sshconfig/
\u2514\u2500\u2500 config
</code></pre></div><p>Where <code>/tmp/sshconfig/config</code> mirrors the content of <code>~/.ssh/config@watson</code>.</p><h3 id="allow-overwrite-1" tabindex="-1"><code>allow_overwrite</code> <a class="header-anchor" href="#allow-overwrite-1" aria-hidden="true">#</a></h3><blockquote><p>[optional] bool</p></blockquote><p>Whether to allow overwriting existing files, overrides the <a href="#allow-overwrite">global <code>allow_overwrite</code></a> key.</p><div class="warning custom-block"><p class="custom-block-title">Dead symlinks</p><p>Dead symlinks are treated as non-existant, and are always overwrited (regardless of this option).</p></div><h3 id="method-1" tabindex="-1"><code>method</code> <a class="header-anchor" href="#method-1" aria-hidden="true">#</a></h3><blockquote><p>[optional] <code>Copy</code>|<code>Symlink</code></p></blockquote><p>Syncing method, overrides the <a href="#method">global <code>method</code></a> key.</p>`,69),i=[n];function r(c,l,d,p,h,u){return t(),o("div",null,i)}var m=e(s,[["render",r]]);export{k as __pageData,m as default};
